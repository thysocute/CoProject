require.define({
  "ep_etherpad-lite/static/js/pad_automatic_reconnect.js": function (require, exports, module) {
exports.showCountDownTimerToReconnectOnModal=function(n,t){if(clientVars.automaticReconnectionTimeout&&n.is(".with_reconnect_timer")){createCountDownElementsIfNecessary(n);var e=createTimerForModal(n,t);n.find("#cancelreconnect").one("click",function(){e.cancel(),disableAutomaticReconnection(n)}),enableAutomaticReconnection(n)}};var createCountDownElementsIfNecessary=function(n){var t=0===n.find("#cancelreconnect").length;if(t){var e=n.find("#defaulttext"),o=n.find("#forcereconnect"),i=$('<p class="reconnecttimer">                                       <span data-l10n-id="pad.modals.reconnecttimer">Trying to reconnect in </span>                                       <span class="timetoexpire"></span>                                     </p>'),c=$('<button id="cancelreconnect" data-l10n-id="pad.modals.cancel">Cancel</button>');localize(i),localize(c),i.insertAfter(e),c.insertAfter(o)}},localize=function(n){html10n.translateElement(html10n.translations,n.get(0))},createTimerForModal=function(n,t){var e=clientVars.automaticReconnectionTimeout*reconnectionTries.nextTry(),o=new CountDownTimer(e);return o.onTick(function(t,e){updateCountDownTimerMessage(n,t,e)}).onExpire(function(){var e=n.is(".disconnected");e?waitUntilClientCanConnectToServerAndThen(function(){forceReconnection(n)},t):forceReconnection(n)}).start(),o},disableAutomaticReconnection=function(n){toggleAutomaticReconnectionOption(n,!0)},enableAutomaticReconnection=function(n){toggleAutomaticReconnectionOption(n,!1)},toggleAutomaticReconnectionOption=function(n,t){n.find("#cancelreconnect, .reconnecttimer").toggleClass("hidden",t),n.find("#defaulttext").toggleClass("hidden",!t)},waitUntilClientCanConnectToServerAndThen=function(n,t){whenConnectionIsRestablishedWithServer(n,t),t.socket.connect()},whenConnectionIsRestablishedWithServer=function(n,t){1===reconnectionTries.counter&&t.socket.once("connect",n)},forceReconnection=function(n){n.find("#forcereconnect").click()},updateCountDownTimerMessage=function(n,t,e){t=10>t?"0"+t:t,e=10>e?"0"+e:e,n.find(".timetoexpire").text(t+":"+e)},reconnectionTries={counter:0,nextTry:function(){var n=Math.pow(2,this.counter);return this.counter++,n}},CountDownTimer=function(n,t){this.duration=n,this.granularity=t||1e3,this.running=!1,this.onTickCallbacks=[],this.onExpireCallbacks=[]};CountDownTimer.prototype.start=function(){if(!this.running){this.running=!0;var n,t=Date.now(),e=this;!function o(){n=e.duration-Math.floor((Date.now()-t)/1e3),n>0?(e.timeoutId=setTimeout(o,e.granularity),e.tick(n)):(e.running=!1,e.tick(0),e.expire())}()}},CountDownTimer.prototype.tick=function(n){var t=CountDownTimer.parse(n);this.onTickCallbacks.forEach(function(n){n.call(this,t.minutes,t.seconds)},this)},CountDownTimer.prototype.expire=function(){this.onExpireCallbacks.forEach(function(n){n.call(this)},this)},CountDownTimer.prototype.onTick=function(n){return"function"==typeof n&&this.onTickCallbacks.push(n),this},CountDownTimer.prototype.onExpire=function(n){return"function"==typeof n&&this.onExpireCallbacks.push(n),this},CountDownTimer.prototype.cancel=function(){return this.running=!1,clearTimeout(this.timeoutId),this},CountDownTimer.parse=function(n){return{minutes:n/60|0,seconds:n%60|0}};
}
});
